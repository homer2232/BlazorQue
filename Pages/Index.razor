@page "/"
@inherits LayoutComponentBase
@inject Microsoft.JSInterop.IJSRuntime JsRuntime
@*@functions{
        protected async override Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await JsRuntime.InvokeAsync<object>("initializeCarousel");
                firstRender = false;
            }
        }
    }*@
<h1>Hello!</h1>

Welcome to my new app.

@*<SurveyPrompt Title="How is Blazor working for you?" />*@



<div id="carouselExampleInterval" style="width: 1000px; height:auto; margin-left:15%;" class="carousel slide" data-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active" data-interval="10000">
            <img src="@images[0]" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item" data-interval="2000">
            <img src="@images[1]" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="@images[2]" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="@images[3]" class="d-block w-100" alt="...">
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleInterval" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleInterval" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

<br />
<br />
<br />
<br />
<div>
    <select data-placeholder="Добавить характеристику" multiple class="chosen-select" tabindex="8">
        @foreach (var item in DropСategory)
        {
            <option>@item.CatName</option>
        }
        <option value=""></option>
        @*<option selected></option>
            <option disabled></option>*@
    </select>
</div>
<br />
<br />
<select id="Сategory" name="Сategory" multiple>
    @foreach (var item in DropСategory)
    {
        <option>@item.CatName</option>
    }
</select>

<br />
<br />

@*<textarea>@foreach(var che in BoxList)
    {
        @che.TextName
    }</textarea>*@
<br />
<br />
@*<button style="padding: 0 50px 50px 0" @onchange="AddToBox"></button>*@
<div style="padding-bottom:500px"></div>
@code{
    public string[] images = { "/picBlazor/cap1.jpg", "picBlazor/cap2.jpg", "/picBlazor/cap3.jpg", "/picBlazor/cap4.jpg", "/picBlazor/cap5.jpg" };

    private IList<Сategory> DropСategory = new[] {
        new Сategory { CatId=1, CatName ="Давление воды на входе в котел, МПа" },
        new Сategory { CatId=1, CatName ="Давление в паровом коллекторе, МПа" },
        new Сategory { CatId=1, CatName ="Давелние максимальное, бра" },
        new Сategory { CatId=4, CatName ="Давление пара за главным стопорным клапаном, МПа" }
    };
    @*@onchange="eventArgs => { CheckboxClicked(item.CatName, eventArgs.Value); }"*@
        //public IList<string> ClubMember { get; set; } = new List<string>();
        //void CheckboxClicked(string clubID, object checkedValue)
        //{
        //    if ((bool)checkedValue)
        //    {
        //        if (!ClubMember.Contains(clubID))
        //        {
        //            ClubMember.Add(clubID);
        //        }
        //    }
        //    else
        //    {
        //        if (ClubMember.Contains(clubID))
        //        {
        //            ClubMember.Remove(clubID);
        //        }
        //    }
        //}

        //public List<String> ClubList()
        //{
        //    // fetch from API or...
        //    List<String> c = new List<String>();
        //    c.Add("Clube01");
        //    c.Add("Clube02");
        //    return c;
        //}
        protected override async void OnAfterRender(bool firstRender)
            {
                await JsRuntime.InvokeVoidAsync("addjQuery");
                base.OnAfterRender(firstRender);
            }

            static string result = Regex.Replace(result, "<[^>]+>", string.Empty);



            public class Сategory
            {
                public int CatId { get; set; }
                public string CatName { get; set; }
            }



            public class ForBox
            {
                public int TextID { get; set; }
                public string TextName { get; set; }
            }

            public IList<ForBox> BoxList = new List<ForBox>();

            public void AddToBox()
            {
                BoxList.Add(new ForBox { TextName = DropСategory.FirstOrDefault().CatName });
            }

}
